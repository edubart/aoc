require 'io'
require 'math'
require 'heapqueue'

local grid: [500][500]int8
local nodes: [500][500]int16

-- read tiles
local N = 0
local y = 0
for line in io.lines('day15.txt') do
  if N == 0 then N = #line end
  local x = 0
  for c in line:gmatchview('%d') do
    grid[y][x] = tointeger(c)
    x = x + 1
  end
  y = y + 1
end

-- expand tiles
for y=0,<5*N do
  for x=0,<5*N do
    if x < N and y < N then continue end
    local risk = grid[y % N][x % N] + (x // N) + (y // N)
    grid[y][x] = risk <= 9 and risk or risk % 9
  end
end

local Point = @record{x: int16, y: int16}
local FrontierEntry = @record{cost: int32, pos: Point}
function FrontierEntry.__lt(a: FrontierEntry, b: FrontierEntry)
  return a.cost < b.cost
end

-- A* algorithm, (see https://www.redblobgames.com/pathfinding/a-star/introduction.html)
local function astar(n: int16): int32
  local start = Point{0,0}
  local goal = Point{n-1, n-1}
  local frontier: heapqueue(FrontierEntry)
  nodes = {}
  frontier:reserve(1000)
  frontier:push{0, start}
  while #frontier > 0 do
    local current = frontier:pop()
    for _,d in ipairs(&(@[]Point){{1,0},{0,1},{-1,0},{0,-1}}) do
      local y, x = current.pos.y+d.y, current.pos.x+d.x
      if y >= 0 and y < n and x >= 0 and x < n and nodes[y][x] == 0 then
        local cost = current.cost + grid[y][x]
        nodes[y][x] = cost
        frontier:push{cost, Point{x,y}}
      end
    end
  end
  return nodes[goal.y][goal.x]
end

local res1 = astar(N)
local res2 = astar(N*5)
print('Part 1', res1)
print('Part 2', res2)

## if TEST then
assert(res1 == 487)
assert(res2 == 2821)
## end
