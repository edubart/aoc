require 'io'
require 'vector'
require 'math'

local vec3 = @record{x: integer, y: integer, z: integer}
local Cuboid = @record{i: vec3, e: vec3}

local function intersect_axis(aix: integer, aex: integer, bix: integer, bex: integer): (integer, integer)
  if bix >= aix and bix <= aex then
    return bix, math.min(bex, aex)
  elseif bex >= aix and bex <= aex then
    return math.max(bix, aix), bex
  elseif bix <= aix and bex >= aex then
    return aix, aex
  else
    return 0, -1
  end
end

function Cuboid.intersect(a: Cuboid, b: Cuboid): Cuboid
  local res: Cuboid
  res.i.x, res.e.x = intersect_axis(a.i.x, a.e.x, b.i.x, b.e.x)
  res.i.y, res.e.y = intersect_axis(a.i.y, a.e.y, b.i.y, b.e.y)
  res.i.z, res.e.z = intersect_axis(a.i.z, a.e.z, b.i.z, b.e.z)
  return res
end

function Cuboid.merge(a: Cuboid, b: Cuboid): Cuboid
  local res: Cuboid
  res.i.x, res.e.x = math.min(a.i.x, b.i.x), math.max(a.e.x, b.e.x)
  res.i.y, res.e.y = math.min(a.i.y, b.i.y), math.max(a.e.y, b.e.y)
  res.i.z, res.e.z = math.min(a.i.z, b.i.z), math.max(a.e.z, b.e.z)
  return res
end

function Cuboid.area(self: Cuboid)
  return (@integer)(self.e.x-self.i.x+1)*(@integer)(self.e.y-self.i.y+1)*(@integer)(self.e.z-self.i.z+1)
end

function Cuboid.valid(self: Cuboid)
  return self.e.x >= self.i.x and self.e.y >= self.i.y and self.e.z >= self.i.z
end

local sections: vector(Cuboid)
sections:reserve(4096)

local function merge_or_add(section: Cuboid, i: integer)
  for k=i,#sections-1 do
    local sect = sections[k]
    local merged = section:merge(sect)
    if merged:area() == section:area() + sect:area() - section:intersect(sect):area() then
      sections[k] = merged
      return
    end
  end
  sections:push(section)
end

local function remove(section: Cuboid)
  local i = 0
  while i < #sections do
    local sect = sections[i]
    local inte = section:intersect(sect)
    if inte:area() > 0 then
      sections:remove(i)
      local split: Cuboid
      for ix=1,3 do
        switch ix do
          case 1 then split.i.x = sect.i.x   split.e.x = inte.i.x-1
          case 2 then split.i.x = inte.i.x   split.e.x = inte.e.x
          case 3 then split.i.x = inte.e.x+1 split.e.x = sect.e.x
        end
        for iy=1,3 do
          switch iy do
            case 1 then split.i.y = sect.i.y   split.e.y = inte.i.y-1
            case 2 then split.i.y = inte.i.y   split.e.y = inte.e.y
            case 3 then split.i.y = inte.e.y+1 split.e.y = sect.e.y
          end
          for iz=1,3 do
            switch iz do
              case 1 then split.i.z = sect.i.z   split.e.z = inte.i.z-1
              case 2 then split.i.z = inte.i.z   split.e.z = inte.e.z
              case 3 then split.i.z = inte.e.z+1 split.e.z = sect.e.z
            end
            if split:valid() and split ~= inte then
              merge_or_add(split, math.max(i, #sections-10))
            end
          end
        end
      end
    else
      i = i + 1
    end
  end
end

local function read_input()
  for line in io.lines('day22.txt') do
    local ok, caps = line:matchview('(%a+) x=([-%d]+)%.%.([-%d]+),y=([-%d]+)%.%.([-%d]+),z=([-%d]+)%.%.([-%d]+)')
    local on: boolean = caps[1] == 'on'
    local sect = Cuboid{
      i={tointeger(caps[2]),tointeger(caps[4]),tointeger(caps[6])},
      e={tointeger(caps[3]),tointeger(caps[5]),tointeger(caps[7])}
    }
    remove(sect)
    if on then
      sections:push(sect)
    end
  end
end

local function part1()
  local count = 0
  for i,sect in ipairs(sections) do
    sect.i = vec3{math.max(sect.i.x,-50),math.max(sect.i.y,-50),math.max(sect.i.z,-50)}
    sect.e = vec3{math.min(sect.e.x, 50),math.min(sect.e.y, 50),math.min(sect.e.z, 50)}
    if sect:valid() then
      count = count + sect:area()
    end
  end
  return count
end

local function part2()
  local count = 0
  for i,sect in ipairs(sections) do
    if sect:valid() then
      count = count + sect:area()
    end
  end
  return count
end

read_input()

local res1 = part1()
print('Part 1', res1)

local res2 = part2()
print('Part 2', res2)

## if TEST then
assert(res1 == 564654)
assert(res2 == 1214193181891104)
## end
